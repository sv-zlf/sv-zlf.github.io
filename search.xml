<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python对微信云开发数据库的操作（二）</title>
      <link href="/undefined.html"/>
      <url>/undefined.html</url>
      
        <content type="html"><![CDATA[<p>本文将接前文，继续讲述python程序对微信云开发数据库的操作。</p><h2 id="二、间接操作"><a href="#二、间接操作" class="headerlink" title="二、间接操作"></a>二、间接操作</h2><p>间接操作指的是python通过云函数对云开发数据库进行操作。所有的操作都是在获取access_token的前提下进行的，不懂的同学可以参考：链接: <a href="https://blog.csdn.net/qq_44001007/article/details/103944492">link</a>.<br>同时由于请求python请求云函数的代码基本类似，只有在data里面进行参数的变换即可，给出一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xxxx</span>(<span class="params">self</span>):</span><br><span class="line">    //在函数括号内需要添加参数</span><br><span class="line">    ACCESS_TOKEN = xxx   //获取的access_token</span><br><span class="line">    ENV = xxx                      //用户的数据库环境ID</span><br><span class="line">    FUNCTION_NAME = xxx   //所要执行的云函数名</span><br><span class="line">    url = <span class="string">&#x27;https://api.weixin.qq.com/tcb/invokecloudfunction?access_token=&#x27;</span> + ACCESS_TOKEN + <span class="string">&#x27;&amp;env=&#x27;</span> + ENV + <span class="string">&#x27;&amp;name=&#x27;</span> + FUNCTION_NAME</span><br><span class="line">    data = &#123;</span><br><span class="line">    //所要传输的参数</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url=url, data=json.dumps(data))</span><br><span class="line">    result = response.json()</span><br></pre></td></tr></table></figure><h3 id="2-1创建集合"><a href="#2-1创建集合" class="headerlink" title="2.1创建集合"></a>2.1创建集合</h3><p>云函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line">cloud.<span class="title function_">init</span>()</span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> db.<span class="title function_">createCollection</span>(event.<span class="property">id</span>)</span><br><span class="line">  <span class="comment">//event.id是python传输的数据，为该集合的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">createCollection</span>(<span class="params">self，<span class="built_in">id</span></span>):</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>:<span class="built_in">id</span>,</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="2-2-查询集合"><a href="#2-2-查询集合" class="headerlink" title="2.2 查询集合"></a>2.2 查询集合</h3><p>云函数：</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ndnSIM实现一发多收</title>
      <link href="/undefined.html"/>
      <url>/undefined.html</url>
      
        <content type="html"><![CDATA[<p>直接进入正题，想要实现一发多收，就是要在路由进行广播时转发的兴趣包与接收到数据包的数目相等，即For_num&#x3D;&#x3D;Rec_num；但正常情况下，路由在第一次接收到数据包时就会把pit条目删除，所以接下来的目的是在接收到数据包对删除pit的命令进行修改。</p><h2 id="一、pit条目修改"><a href="#一、pit条目修改" class="headerlink" title="一、pit条目修改"></a>一、pit条目修改</h2><p>先进入到ndnSIM源目录下</p><p><img src="https://s2.loli.net/2022/03/13/c1q9ETghuMdUK3w.png"></p><p>然后进入pit-entry.cpp&#x2F;.hpp所在目录，对这两个文件进行修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd NFD/daemon/table/</span><br></pre></td></tr></table></figure><p>先对hpp进行修改，添加For_NUM和Rec_NUM两个变量</p><p><img src="https://s2.loli.net/2022/03/13/ZDa2F4NlGQ5Ocwo.png"></p><p>然后添加获取参数的函数与对变量操作的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> </span></span><br><span class="line"><span class="function"><span class="title">get_RecNUM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Rec_NUM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> </span></span><br><span class="line"><span class="function"><span class="title">get_ForNUM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> For_NUM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">afterRec_inter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> For_NUM++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">afterRec_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Rec_NUM++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下进行参数的初始化定义，在cpp中实现</p><p><img src="https://s2.loli.net/2022/03/13/AESXW1HhkKRD3xe.png"></p><h2 id="二、转发策略修改"><a href="#二、转发策略修改" class="headerlink" title="二、转发策略修改"></a>二、转发策略修改</h2><h3 id="2-1-after-Recevie-Interest"><a href="#2-1-after-Recevie-Interest" class="headerlink" title="2.1 after Recevie Interest"></a>2.1 after Recevie Interest</h3><p>进入forwarder.cpp所在文件夹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="variable constant_">NFD</span>/daemon/fw</span><br></pre></td></tr></table></figure><p>修改onOutgoingInterest（）函数</p><p><img src="https://s2.loli.net/2022/03/13/yH9XEQ1fVdRsglu.png"></p><h3 id="2-2-after-Recevie-data"><a href="#2-2-after-Recevie-data" class="headerlink" title="2.2 after Recevie data"></a>2.2 after Recevie data</h3><p>在同一个目录下打开strategy.cpp文件，对sendData（）函数进行修改</p><p><img src="https://s2.loli.net/2022/03/13/YxvCfIayOSl2L18.png"></p><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>运行一个具有多个生产者的路由拓扑，查看路由接收的数据包数量，即可确认是否实现一发多收。</p><p><img src="https://s2.loli.net/2022/03/13/nkbEUVugKwcrqdZ.png"></p><p>有上图可以得出接收的是发送的两倍，实现一发多收。</p>]]></content>
      
      
      <categories>
          
          <category> NDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ndnSIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu安装ndnSIM</title>
      <link href="/undefined.html"/>
      <url>/undefined.html</url>
      
        <content type="html"><![CDATA[<p>通过对资料的查询获取相对应的版本号与ndnsim之间的关系：</p><table><thead><tr><th>操作系统</th><th>Ubuntu 18</th></tr></thead><tbody><tr><td>ndnSIM</td><td>ndnSIM-2.7</td></tr><tr><td>ns-3-dev</td><td>ndnSIM-ns-3.29</td></tr><tr><td>pybindgen</td><td>0.19.0</td></tr></tbody></table><p>如果想要安装其他版本，请找到上述条件所对应的版本号即可。</p><h2 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential libsqlite3-dev libboost-all-dev libssl-dev git python-setuptools castxml</span><br><span class="line">sudo apt install python-dev python-pygraphviz python-kiwi python-gnome2 ipython libcairo2-dev python3-gi libgirepository1.0-dev python-gi python-gi-cairo gir1.2-gtk-3.0 gir1.2-goocanvas-2.0 python-pip</span><br><span class="line">pip install pygraphviz pycairo PyGObject pygccxml</span><br><span class="line">sudo apt-get install graphviz libgraphviz-dev graphviz-dev pkg-config</span><br><span class="line">pip install pygraphviz</span><br></pre></td></tr></table></figure><p>可能出现报错无法安装的情况，我把后面的安装好，在安装前面的就成功了;同时这是Ubuntu18所需要的依赖环境，其他版本请参照官网。</p><h2 id="二、下载源码"><a href="#二、下载源码" class="headerlink" title="二、下载源码"></a>二、下载源码</h2><p>现在任意文件创建个ndnsim文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ndnSIM2.7</span><br></pre></td></tr></table></figure><p>然后进入该文件夹下，进行源码的下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ndnSIM2.7</span><br><span class="line">git clone https://github.com/named-data-ndnSIM/ns-3-dev.git ns-3</span><br><span class="line">git clone https://github.com/named-data-ndnSIM/pybindgen.git pybindgen</span><br><span class="line">git clone https://github.com/named-data-ndnSIM/ndnSIM.git ns-3/src/ndnSIM</span><br></pre></td></tr></table></figure><p>记住千万不要在最后一条命令按照官网的说法加上–recursive，这样就会把NFD和ndn-cxx模块直接下载最新版本，这样后面的操作就无效了。</p><h2 id="三、修改对应版本号"><a href="#三、修改对应版本号" class="headerlink" title="三、修改对应版本号"></a>三、修改对应版本号</h2><p>这里的命令依靠git实现，能到这一步肯定都安装好了，就不多说了。<br>首先进入到ndnSIM的核心源码地带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ns-3/src/ndnSIM</span><br></pre></td></tr></table></figure><p>通过git checkout修改版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout ndnSIM-2.7</span><br></pre></td></tr></table></figure><p>也可以通过git tag查看所有的版本号，然后修改为想要安装的版本</p><p><img src="https://img-blog.csdnimg.cn/20200725105311613.png"></p><p>然后安装NFD和ndn-cxx模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><p>接下来进入到ndnSIM2.7&#x2F;ns-3文件下进行版本的修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout ndnSIM-ns-3.29</span><br></pre></td></tr></table></figure><p>出现如图所示即为成功</p><p><img src="https://s2.loli.net/2022/03/12/LtPm79ICKAYwdrg.png"></p><p>接下对pybindgen的版本进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ndnSIM2.7/pybindgen</span><br><span class="line">git checkout 0.19.0</span><br></pre></td></tr></table></figure><p>然后在此目录下安装安装该python模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p> <img src="https://s2.loli.net/2022/03/12/fnUh7aDJ2MOErR5.png"></p><h2 id="四、运行编译"><a href="#四、运行编译" class="headerlink" title="四、运行编译"></a>四、运行编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ndnSIM2.1/ns-3</span><br><span class="line">./waf configure --enable-examples</span><br><span class="line">./waf</span><br><span class="line">./waf --run ndn-simple --vis</span><br></pre></td></tr></table></figure><p>正常情况直接编译完成，出现错误的话请看下面的修改提示</p><p><img src="https://s2.loli.net/2022/03/12/B1fgyvZdDbkqxri.png"></p><p>进入到可视化模块下将‘file&#x3D;’删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  ndnSIM2.7/ns-3/src/visualizer/visualizer</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/12/q8nABHgkLvl2smt.png"></p><p>进入base.py文件，修改保存即可</p><p><img src="https://s2.loli.net/2022/03/12/ka8ywbI1o5YvpLj.png"></p><p>第二种错误可能出现在运行时加上–vis可视化模块时，如下图所示</p><p><img src="https://s2.loli.net/2022/03/12/UDG7XjaZmOF3BuJ.png"></p><p>这种情况下，还是进入刚才的那个文件夹，修改hub.py文件</p><p><img src="https://s2.loli.net/2022/03/12/brEc9vg3pFwqhsj.png"></p><p>将from . import注释，修改为import core。再次运行就可以了</p><p><img src="https://s2.loli.net/2022/03/12/94Q7mq85lV1ekwz.png"></p><p>经过试验，添加Ubuntu16的对应版本</p><table><thead><tr><th>操作系统</th><th>Ubuntu 16</th></tr></thead><tbody><tr><td>ndnSIM</td><td>ndnSIM-2.5</td></tr><tr><td>ns-3-dev</td><td>ndnSIM-v2.5</td></tr><tr><td>pybindgen</td><td>0.18.0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> NDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ndnSIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python对微信云开发数据库的操作（一）</title>
      <link href="/undefined.html"/>
      <url>/undefined.html</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述python程序对微信云开发数据库的操作。</p><h1 id="一、直接操作"><a href="#一、直接操作" class="headerlink" title="一、直接操作"></a>一、直接操作</h1><p>直接操作指的是通过python程序对云开发数据库直接进行操作。<br>所有的操作前提都是在获取access_token下进行的，先通过下列代码获取access_token在进行接下来的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">access_token</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">           获取access_token</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        APPID = <span class="string">&#x27;**********&#x27;</span>                        //小程序ID</span><br><span class="line">        APPSECRET = <span class="string">&#x27;**************&#x27;</span>                //小程序秘钥</span><br><span class="line">        WECHAT_URL = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#x27;</span> + APPID + <span class="string">&#x27;&amp;secret=&#x27;</span> + APPSECRET</span><br><span class="line">        response = requests.get(WECHAT_URL)</span><br><span class="line">        result = response.json()</span><br><span class="line">        <span class="keyword">return</span> result[<span class="string">&quot;access_token&quot;</span>]     //将返回值解析获取access_token</span><br></pre></td></tr></table></figure><h2 id="1-1-创建集合"><a href="#1-1-创建集合" class="headerlink" title="1.1 创建集合"></a>1.1 创建集合</h2><p>此方法的创建只需要将集合的名字post给数据库即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">databaseCollectionAdd</span>(<span class="params">access_token</span>):</span><br><span class="line">       <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          创建数据库</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       url = <span class="string">&#x27;https://api.weixin.qq.com/tcb/databasecollectionadd?access_token&#x27;</span>+access_token</span><br><span class="line">       data=&#123;</span><br><span class="line">             <span class="string">&quot;env&quot;</span>:<span class="string">&quot;******&quot;</span>,                //用户的数据库环境ID</span><br><span class="line">             <span class="string">&quot;collection_name&quot;</span>: <span class="string">&quot;*******&quot;</span>   //数据库集合的名称</span><br><span class="line">             &#125;</span><br><span class="line">       response = requests.post(url, data=json.dumps(data))</span><br><span class="line">       result = response.json()</span><br><span class="line">       <span class="built_in">print</span>(result)     //将返回值打印</span><br></pre></td></tr></table></figure><h2 id="1-2-查询记录"><a href="#1-2-查询记录" class="headerlink" title="1.2 查询记录"></a>1.2 查询记录</h2><p>将集合的名字Post即可返回该集合的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">databaseQuery</span>(<span class="params">access_token,collection_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            检索数据库</span></span><br><span class="line"><span class="string">           collection_name 集合的名称</span></span><br><span class="line"><span class="string">           .limit() 括号内的数值限定返回的记录数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        url = <span class="string">&#x27;https://api.weixin.qq.com/tcb/databasequery?access_token=&#x27;</span> + access_token</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;env&quot;</span>: <span class="string">&quot;*******&quot;</span>,          //用户的数据库环境ID</span><br><span class="line">            <span class="string">&quot;query&quot;</span>: <span class="string">&quot;db.collection(\&quot;&quot;</span>+collection_name+<span class="string">&quot;\&quot;).limit(100).get()&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, data=json.dumps(data))</span><br><span class="line">        result = response.json()</span><br><span class="line">        <span class="built_in">print</span>(result)     //将返回值打印</span><br></pre></td></tr></table></figure><h2 id="1-3-插入记录"><a href="#1-3-插入记录" class="headerlink" title="1.3 插入记录"></a>1.3 插入记录</h2><p>通过Post集合名字和Add函数对内容（datas）的传输。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">databaseAdd</span>(<span class="params">access_token,collection_name</span>):</span><br><span class="line">       <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       新建记录并对内容进行定义</span></span><br><span class="line"><span class="string">       collection_name 集合的名称</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       url = <span class="string">&#x27;https://api.weixin.qq.com/tcb/databaseadd?access_token&#x27;</span> + access_token</span><br><span class="line">       data = &#123;</span><br><span class="line">           <span class="string">&quot;env&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">           <span class="string">&quot;query&quot;</span>: <span class="string">&quot;db.collection(\&quot;&quot;</span>+collection_name+<span class="string">&quot;\&quot;).add(&#123;&quot;</span>+datas+<span class="string">&quot;&#125;)&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">       datas=[&#123;</span><br><span class="line">       <span class="string">&quot;字段名称&quot;</span>：<span class="string">&quot;内容&quot;</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       这里主要是对创建记录的直接定义</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">             &#125;]</span><br><span class="line">       response = requests.post(url, data=json.dumps(data))</span><br><span class="line">       result = response.json()</span><br><span class="line">       <span class="built_in">print</span>(result)     //将返回值打印</span><br></pre></td></tr></table></figure><p>经测试这种创建记录的方式对datas的定义要求较为严格，一但定义不够严格会出现创建失败，所以建议通过间接的方式对数据库进行插入记录。</p><h2 id="1-4-删除记录"><a href="#1-4-删除记录" class="headerlink" title="1.4 删除记录"></a>1.4 删除记录</h2><p>通过Post集合名称将该集合直接从数据库移除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">databaseQuery</span>(<span class="params">access_token,collection_name</span>):</span><br><span class="line">      <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">         collection_name 集合的名称</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">      url = <span class="string">&#x27;https://api.weixin.qq.com/tcb/databasedelete?access_token=&#x27;</span> + access_token</span><br><span class="line">      data = &#123;</span><br><span class="line">          <span class="string">&quot;env&quot;</span>: <span class="string">&quot;*******&quot;</span>,          //用户的数据库环境ID</span><br><span class="line">          <span class="string">&quot;query&quot;</span>: <span class="string">&quot;db.collection(\&quot;&quot;</span>+collection_name+<span class="string">&quot;\&quot;)..where(&#123;done:false&#125;).remove()&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      response = requests.post(url, data=json.dumps(data))</span><br><span class="line">      result = response.json()</span><br><span class="line">      <span class="built_in">print</span>(result)     //将返回值打印</span><br></pre></td></tr></table></figure><h2 id="1-5-更新记录"><a href="#1-5-更新记录" class="headerlink" title="1.5 更新记录"></a>1.5 更新记录</h2><p>更新记录是对已有的记录内容进行修改，所以说想要对记录内容修改不可用.add()进行，通过.update()进行内容修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">databaseUpdate</span>(<span class="params">access_token,collection_name</span>):</span><br><span class="line">       <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       .where() 该集合所在记录的检索</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       url = <span class="string">&#x27;https://api.weixin.qq.com/tcb/databaseadd?access_token&#x27;</span> + access_token</span><br><span class="line">       data = &#123;</span><br><span class="line">           <span class="string">&quot;env&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">           <span class="string">&quot;query&quot;</span>: <span class="string">&quot;db.collection(\&quot;&quot;</span>+collection_name+<span class="string">&quot;\&quot;).where(&#123;age:14&#125;).update(&#123;data:&#123;age: _.inc(1)&#125;&#125;)&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">      &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">      这个例子是将集合里age=<span class="number">14</span>所有记录自增<span class="number">1</span></span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       response = requests.post(url, data=json.dumps(data))</span></span><br><span class="line"><span class="string">       result = response.json()</span></span><br><span class="line"><span class="string">       print(result)     //将返回值打印</span></span><br></pre></td></tr></table></figure><p>更新是对记录的操作，所以很需要.where()的帮助，请大家牢记该函数的使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是通过对微信小程序一段时间的学习后总结出来的，本作者是个新人，如有错误可指出，我将及时改正。<br>第二部分是通过调用云函数来对数据库进行操作，这种方法的BUG似乎比直接操作少。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nRF52840作为通信模块与Arduino的联动</title>
      <link href="/undefined.html"/>
      <url>/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="蓝牙控制Arduino板上13号引脚灯的开关"><a href="#蓝牙控制Arduino板上13号引脚灯的开关" class="headerlink" title="蓝牙控制Arduino板上13号引脚灯的开关"></a>蓝牙控制Arduino板上13号引脚灯的开关</h3><h4 id="开发环境及工具"><a href="#开发环境及工具" class="headerlink" title="开发环境及工具"></a>开发环境及工具</h4><table><thead><tr><th></th><th>名称</th></tr></thead><tbody><tr><td>开发工具</td><td>Segger Embedded Studio</td></tr><tr><td>SDK版本</td><td>nRF5_SDK_15.3.0_59ac345</td></tr><tr><td>开发板</td><td>IK-nRF52840DK+Arduino Uno+IO扩展板</td></tr><tr><td>J-link</td><td>ARM-V9仿真器</td></tr><tr><td>手机App</td><td>nRF UART v2.0</td></tr></tbody></table><h4 id="nRF52840的代码烧录"><a href="#nRF52840的代码烧录" class="headerlink" title="nRF52840的代码烧录"></a>nRF52840的代码烧录</h4><p>打开SKD中示例的ble_app_uart，路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\nRF5_SDK_15.3.0_59ac345\examples\ble_peripheral\ble_app_uart\pca10056\s140\ses</span><br></pre></td></tr></table></figure><p>在main函数中将循环实例修改：</p><img src="https://s2.loli.net/2022/03/12/SyufYqkPidp9lae.png" style="zoom: 80%;" /><p>红圈里的修改为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> cr;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">app_uart_get</span>(&amp;cr) != NRF_SUCCESS);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">app_uart_put</span>(cr) != NRF_SUCCESS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cr == <span class="string">&#x27;q&#x27;</span> || cr == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; \r\nExit!\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后Build，Debug：</p><img src="https://s2.loli.net/2022/03/12/mXoL1pqk4ysEP9Q.png" style="zoom:67%;" /><img src="https://s2.loli.net/2022/03/12/gMkvVwdZ93WDc5Q.png" style="zoom:67%;" /><h4 id="Arduino的测试代码"><a href="#Arduino的测试代码" class="headerlink" title="Arduino的测试代码"></a>Arduino的测试代码</h4><p>将测试代码刷入Arduino就行了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ss;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line"> <span class="built_in">pinMode</span>(<span class="number">13</span>,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(Serial.<span class="built_in">available</span>())&#123;</span><br><span class="line">    ss=Serial.<span class="built_in">read</span>();</span><br><span class="line">  Serial.<span class="built_in">println</span>(ss);</span><br><span class="line">    <span class="keyword">if</span>(ss==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="built_in">digitalWrite</span>(<span class="number">13</span>,HIGH); </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">digitalWrite</span>(<span class="number">13</span>,LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="固件连接"><a href="#固件连接" class="headerlink" title="固件连接"></a>固件连接</h4><p>将nRF52840的P06号脚接到IO扩展板上的RX接口，然后将VCC和GND与IO扩展板相应位置连接，如下图：</p><img src="https://s2.loli.net/2022/03/12/5ARiQ2kcNTVZPmF.png" style="zoom:50%;" /><p>然后Arduino板通上电。</p><h4 id="手机蓝牙端测试"><a href="#手机蓝牙端测试" class="headerlink" title="手机蓝牙端测试"></a>手机蓝牙端测试</h4><p>1.打开App搜索设备</p><img src="https://s2.loli.net/2022/03/12/YHX76db9yNPOaAB.png" style="zoom: 33%;" /><p>连接_UART设备<br>2.发送测试数据字符1</p><img src="https://s2.loli.net/2022/03/12/bSqRlZeEKkUvrnu.png" style="zoom:33%;" /><p>然后板上13灯亮起</p><img src="https://s2.loli.net/2022/03/12/WrNcS3XsHnOwyCx.png" style="zoom:50%;" /><p>3.输入其他任意字符熄灭</p><img src="https://s2.loli.net/2022/03/12/zfd4oCUTIFHA1se.png" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/03/12/QrER1vYujwzAGOD.png" style="zoom:50%;" /><p>到这里就基本结束测试，当然大家可以在扩展板上加更多的传感器去实现更加强大的功能!!!!!</p>]]></content>
      
      
      <categories>
          
          <category> NDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nRF52840 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nordic nRF52840 入门学习</title>
      <link href="/undefined.html"/>
      <url>/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="Board-Definition组"><a href="#Board-Definition组" class="headerlink" title="Board Definition组"></a>Board Definition组</h3><p>“ Board Definition”组中加入板卡定义文件“ boards.c”,该文件针对于具体板卡,主要要用来定义板卡的指示灯、按键、IO输出电压(仅nRFS2840具有此功能)以及常用的操作函数。对于Nordic nRF52840开发板(兼容 Nordic的PCA10056),设计了4个指示灯和按键,在“ boards.c”文件中,我们可以看到这些按键和指示灯的初始化函数以及一些基本功能如点亮、熄灭、翻转的操作函数。</p><p><img src="https://s2.loli.net/2022/03/12/8pnHB7jaXv2kP1Y.png"></p><h3 id="Board-Support组"><a href="#Board-Support组" class="headerlink" title="Board Support组"></a>Board Support组</h3><p>“ Board Support”组加入的是板卡支持包文件,即BSP文件,主要用于实现指示灯和按键的驱动。</p><p><img src="https://s2.loli.net/2022/03/12/WS51mxILhzJCi23.png"></p><h3 id="UTF8-x2F-UTF16-converter-组"><a href="#UTF8-x2F-UTF16-converter-组" class="headerlink" title="UTF8&#x2F;UTF16 converter 组"></a>UTF8&#x2F;UTF16 converter 组</h3><p>“UTF8&#x2F;UTF16 converter”组只需加入一个实现UTF8&#x2F;UTF16编码转换的文件。<br><img src="https://s2.loli.net/2022/03/12/4Lein2tspcY97rK.png"></p><h3 id="NRF-BLE组"><a href="#NRF-BLE组" class="headerlink" title="NRF BLE组"></a>NRF BLE组</h3><p>“ NRF BLE”组加入的是BLE相关的库文件,如广播、连接参数协、配对管理等等。<br><img src="https://s2.loli.net/2022/03/12/KgaQWBhncswMU2b.png"></p><h3 id="NRF-Drivers组"><a href="#NRF-Drivers组" class="headerlink" title="NRF Drivers组"></a>NRF Drivers组</h3><p>“ NRF Drivers”组加入的是各种外设的驱动库文件,如时钟、 GPOTE、UART等等。<br><img src="https://s2.loli.net/2022/03/12/M3wb9xsVk8r6tGI.png"></p><h3 id="NRF-Libraries"><a href="#NRF-Libraries" class="headerlink" title="NRF Libraries"></a>NRF Libraries</h3><p>“ NRF Libraries”组加入的是各种应用的库文件,如APP定时器、CRC校验、软件FIFO、<br>简易文件系统以及错误处理等等。<br><img src="https://s2.loli.net/2022/03/12/SsLUGfnVT13moBE.png"></p><h3 id="NRF-Log组"><a href="#NRF-Log组" class="headerlink" title="NRF Log组"></a>NRF Log组</h3><p>“ NRF Log”组中加入的文件如下表所示,Log程序模块为程序提供日志打印功能。<br><img src="https://s2.loli.net/2022/03/12/zhJHxUvIKMVwnY9.png"></p><h3 id="NRF-Segger-RT组"><a href="#NRF-Segger-RT组" class="headerlink" title="NRF Segger_RT组"></a>NRF Segger_RT组</h3><p>nRF_ Segger_RTT”组中加入的文件如下表所示,它们的作用是实现 JLINK- RTT Viewer<br>作为Log输出终端,打印Log。<br><img src="https://s2.loli.net/2022/03/12/E61qimBFjCzGpUP.png"></p><h3 id="NRE-Softdevice"><a href="#NRE-Softdevice" class="headerlink" title="NRE Softdevice"></a>NRE Softdevice</h3><p>“nRF_ Softdevice”组中加入的文件如下表所示,它们用于使能或禁止 Softdevice以及<br>向应用程序发布 Softdevice事件,功能如下:</p><p>(1)使能 Softdevice及其事件中断。</p><p>(2)禁止 Softdevice。</p><p>(3)从 Softdevice接收堆栈事件,并将它们转发给应用程序已注册的事件监查者。</p><p>(4)发送 Softdevice状态事件给应用程序和驱动。</p><p>(5)发送可由事件监查者接受或拒绝的SoftDevice状态请求。<br><img src="https://s2.loli.net/2022/03/12/Ils5mSyvA7k1Uwr.png"></p>]]></content>
      
      
      <categories>
          
          <category> NDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nRF52840 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Turtle 3PA三轮小车基于pixhawk的改装（一）</title>
      <link href="/undefined.html"/>
      <url>/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="Turtle-3PA三轮小车基于pixhawk的改装之准备"><a href="#Turtle-3PA三轮小车基于pixhawk的改装之准备" class="headerlink" title="Turtle 3PA三轮小车基于pixhawk的改装之准备"></a>Turtle 3PA三轮小车基于pixhawk的改装之准备</h1><p>今天在老师的指导下，对Arduino的小车进行改装，想要用pixhawk自动驾驶仪对小车进行控制。<br>工具准备：<br>（1）硬件<br>pixhawk控制板:</p><p><img src="https://s2.loli.net/2022/03/12/4zsFJA7OLHZD6UP.png"></p><p>Turtle 3PA三轮小车：</p><p><img src="https://s2.loli.net/2022/03/12/gxma9oRutrOfMyX.png"></p><p>详细信息：<a href="http://www.dfrobot.com.cn/goods-1069.html">http://www.dfrobot.com.cn/goods-1069.html</a></p><p>乐迪at9s：</p><p><img src="https://s2.loli.net/2022/03/12/39ucVU6LwgjZ1sm.png"></p><p>（2）软件<br>Mission planner：</p><p><img src="https://s2.loli.net/2022/03/12/hxqV1kIG29iJBYo.png"></p><p>官网：<a href="http://ardupilot.org/planner/">http://ardupilot.org/planner/</a><br>QGround：</p><p><img src="https://s2.loli.net/2022/03/12/7ASgCUQti9TrePN.png"></p><p>官网：<a href="http://qgroundcontrol.com/">http://qgroundcontrol.com/</a></p><p>两个地面站是为了刷飞控固件的方便，在对pixhawk飞控刷小车固件的时候总会出现Bad Ahrs，为了解决这个问题因此采用QGround。<br>具体的刷的方法在下个博客说明。</p>]]></content>
      
      
      <categories>
          
          <category> 科技杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixhawk </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
